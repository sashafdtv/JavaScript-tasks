var features = require('./browser/documentfeatures');
var defaultParser = require('htmlparser');
var HtmlToDom     = require('./browser/htmltodom').HtmlToDom;
var domToHtml     = require('./browser/domtohtml').domToHtml;
var dom = require('./level3/index').dom;
var style = require('./level2/style');

function getDefaultParser() {
    if (defaultParser === null) {
        try {
            defaultParser = require('htmlparser');
        }
        catch (e) {
            try {
                defaultParser = require('node-htmlparser/lib/node-htmlparser');
            }
            catch (e2) {
                defaultParser = undefined;
            }
        }
    }
    return defaultParser;
}

/**
 * Augments the given DOM by adding browser-specific properties and methods (BOM).
 * Returns the augmented DOM.
 */
var browserAugmentation = function(dom, options) {

    if (dom._augmented) {
        return dom;
    }

    if(!options) {
        options = {};
    }

    // set up html parser - use a provided one or try and load from library
    var htmltodom = new HtmlToDom(options.parser || getDefaultParser());

    if (!dom.HTMLDocument) {
        dom.HTMLDocument = dom.Document;
    }
    if (!dom.HTMLDocument.prototype.write) {
        dom.HTMLDocument.prototype.write = function(html) {
            this.innerHTML = html;
        };
    }

    dom.Element.prototype.getElementsByClassName = function(className) {

        function filterByClassName(child) {
            if (!child) {
                return false;
            }

            if (child.nodeType &&
                child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
            {
                child = child._entity;
            }

            var classString = child.className;
            if (classString) {
                var s = classString.split(" ");
                for (var i=0; i<s.length; i++) {
                    if (s[i] === className) {
                        return true;
                    }
                }
            }
            return false;
        }

        return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
    };

    dom.Element.prototype.__defineGetter__('sourceIndex', function() {
        /*
         * According to QuirksMode:
         * Get the sourceIndex of element x. This is also the index number for
         * the element in the document.getElementsByTagName('*') array.
         * http://www.quirksmode.org/dom/w3c_core.html#t77
         */
        var items = this.ownerDocument.getElementsByTagName('*'),
            len = items.length;

        for (var i = 0; i < len; i++) {
            if (items[i] === this) {
                return i;
            }
        }
    });

    dom.Document.prototype.__defineGetter__('outerHTML', function() {
        return domToHtml(this, true);
    });

    dom.Element.prototype.__defineGetter__('outerHTML', function() {
        return domToHtml(this, true);
    });

    dom.Element.prototype.__defineGetter__('innerHTML', function() {
        if (/^(?:script|style)$/.test(this._tagName)) {
            var type = this.getAttribute('type');
            if (!type || /^text\//i.test(type) || /\/javascript$/i.test(type)) {
                return domToHtml(this._childNodes, true, true);
            }
        }

        return domToHtml(this._childNodes, true);
    });

    dom.Element.prototype.__defineSetter__('doctype', function() {
        throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
    });
    dom.Element.prototype.__defineGetter__('doctype', function() {
        var r = null;
        if (this.nodeName == '#document') {
            if (this._doctype) {
                r = this._doctype;
            }
        }
        return r;
    });

    dom.Element.prototype.__defineSetter__('innerHTML', function(html) {
        //Clear the children first:
        var child;
        while ((child = this._childNodes[0])) {
            this.removeChild(child);
        }

        if (this.nodeName === '#document') {
            parseDocType(this, html);
        }
        if (html !== "" && html != null) {
            htmltodom.appendHtmlToElement(html, this);
        }
        return html;
    });


    dom.Document.prototype.__defineGetter__('innerHTML', function() {
        return domToHtml(this._childNodes, true);
    });

    dom.Document.prototype.__defineSetter__('innerHTML', function(html) {
        //Clear the children first:
        var child;
        while ((child = this._childNodes[0])) {
            this.removeChild(child);
        }

        if (this.nodeName === '#document') {
            parseDocType(this, html);
        }
        if (html !== "" && html != null) {
            htmltodom.appendHtmlToElement(html, this);
        }
        return html;
    });

    var DOC_HTML5      = /<!doctype html>/i,
        DOC_TYPE       = /<!DOCTYPE (\w(.|\n)*)">/i,
        DOC_TYPE_START = '<!DOCTYPE ',
        DOC_TYPE_END   = '">';

    function parseDocType(doc, html) {
        var publicID = '',
            systemID = '',
            fullDT = '',
            name = 'HTML',
            set = true,
            doctype = html.match(DOC_HTML5);

        //Default, No doctype === null
        doc._doctype = null;

        if (doctype && doctype[0]) { //Handle the HTML shorty doctype
            fullDT = doctype[0];
        } else { //Parse the doctype
            // find the start
            var start     = html.indexOf(DOC_TYPE_START),
                end       = html.indexOf(DOC_TYPE_END),
                docString;

            if (start < 0 || end < 0) {
                return;
            }

            docString = html.substr(start, (end-start)+DOC_TYPE_END.length);
            doctype = docString.replace(/[\n\r]/g,'').match(DOC_TYPE);

            if (!doctype) {
                return;
            }

            fullDT = doctype[0];
            doctype = doctype[1].split(' "');
            var _id1 = doctype.length ? doctype.pop().replace(/"/g, '') : '',
                _id2 = doctype.length ? doctype.pop().replace(/"/g, '') : '';

            if (_id1.indexOf('-//') !== -1) {
                publicID = _id1;
            }
            if (_id2.indexOf('-//') !== -1) {
                publicID = _id2;
            }
            if (_id1.indexOf('://') !== -1) {
                systemID = _id1;
            }
            if (_id2.indexOf('://') !== -1) {
                systemID = _id2;
            }
            if (doctype.length) {
                doctype = doctype[0].split(' ');
                name = doctype[0].toUpperCase();
            }
        }
        doc._doctype = new dom.DOMImplementation().createDocumentType(name, publicID, systemID);
        doc._doctype._ownerDocument = doc;
        doc._doctype._fullDT = fullDT;
        doc._doctype.toString = function() {
            return this._fullDT;
        };
    }

    dom.Document.prototype.getElementsByClassName = function(className) {

        function filterByClassName(child) {
            if (!child) {
                return false;
            }

            if (child.nodeType &&
                child.nodeType === dom.Node.ENTITY_REFERENCE_NODE)
            {
                child = child._entity;
            }

            var classString = child.className;
            if (classString) {
                var s = classString.split(" ");
                for (var i=0; i<s.length; i++) {
                    if (s[i] === className) {
                        return true;
                    }
                }
            }
            return false;
        }

        return new dom.NodeList(this.ownerDocument || this, dom.mapper(this, filterByClassName));
    };

    dom.Element.prototype.__defineGetter__('nodeName', function(val) {
        return this._nodeName.toUpperCase();
    });

    dom.Element.prototype.__defineGetter__('tagName', function(val) {
        var t = this._tagName.toUpperCase();
        //Document should not return a tagName
        if (this.nodeName === '#document') {
            t = null;
        }
        return t;
    });

    dom.Element.prototype.scrollTop = 0;
    dom.Element.prototype.scrollLeft = 0;

    dom.Document.prototype.__defineGetter__('parentWindow', function() {
        if (!this._parentWindow) {
            this._parentWindow = {};
        }
        return this._parentWindow;
    });

    dom.Document.prototype.__defineSetter__('parentWindow', function(window) {
        this._parentWindow = window;
    });

    dom.Document.prototype.__defineGetter__('defaultView', function() {
        return this.parentWindow;
    });

    dom._augmented = true;
    return dom;
};

function create(win) {
    if (!win) {
        var win = {};
    }
    var options = options || {};
    var level = dom.level3.html;

    if (!options.url) {
        options.url =
            module.filename;
        options.url = options.url.replace(/\\/g, '/');
        if (options.url[0] !== '/') {
            options.url = '/' + options.url;
        }
        options.url = 'file://' + options.url;
    }
    var browser = browserAugmentation(level, options);

    var doc = (browser.HTMLDocument) ? new browser.HTMLDocument(options) : new browser.Document(options);

//    features.applyDocumentFeatures(doc, options.features);

    doc.write('<html><head></head><body></body></html>');

    if (doc.close && !options.deferClose) {
        doc.close();
    }

    win.document = doc;
    return require('./node-jquery').create(win);
}

module.exports = create();
module.exports.create = create;
